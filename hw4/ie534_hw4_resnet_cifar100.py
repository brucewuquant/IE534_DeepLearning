# -*- coding: utf-8 -*-
"""ie534_hw4_resnet_cifar100.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ixuYKbKj4KrzzMZhvTBl_xEIYIVkBRm0

1. Implement ResNets from scratch on CIFAR100 and Tiny ImageNet
2. ResNets distributed on Blue Waters (sync/async)
3. Use pretrained ResNet on CIFAR100
"""

from google.colab import drive
drive.mount('/content/drive')

import os

import h5py
import copy
import time
import numpy as np
import matplotlib.pyplot as plt

import torchvision, torch
from torch.autograd import Variable
import torch.nn as nn
import torch.nn.functional as F
import torchvision.transforms as transforms
import torch.optim as optim
import torch.backends.cudnn as cudnn

# get mean and std of CIFAR100 for data transformation
# tmp_train = torchvision.datasets.CIFAR100(root='./data', train=True, download=True, transform= transforms.Compose([transforms.ToTensor()]))
# tmp_train_mean, tmp_train_std = np.mean(tmp_train.data, axis=(0,1,2))/255, np.std(tmp_train.data, axis=(0,1,2))/255
# print(tmp_train_mean,tmp_train_std)





# data augmentation
train_transform = transforms.Compose([
    transforms.RandomCrop(32, padding=4),
    transforms.RandomHorizontalFlip(),
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

test_transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.4914, 0.4822, 0.4465), (0.2023, 0.1994, 0.2010)),
])

# For trainning data
trainset = torchvision.datasets.CIFAR100(root='./data',
train=True,download=True, transform=train_transform)
trainloader = torch.utils.data.DataLoader(trainset,
batch_size=100, shuffle=True, num_workers=8)
# For testing data
testset = torchvision.datasets.CIFAR100(root='./data',
train=False,download=True, transform=test_transform)
testloader = torch.utils.data.DataLoader(testset,
batch_size=100, shuffle=False, num_workers=8)

# Implement basic block in Fig1
# Reference: https://zhuanlan.zhihu.com/p/62525824
# Reference: https://courses.grainger.illinois.edu/ie534/fa2019/secure/lecture_resnet_distributed_training.pdf 
class BasicBlock(nn.Module):
    expansion =1 
    def __init__(self, in_channels, out_channels, stride=1, downsample=None):
        super(BasicBlock,self).__init__()
        
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1)
        self.bn2 = nn.BatchNorm2d(out_channels) 
        self.downsample = downsample
    
    def forward(self,x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            identity = self.downsample(x)
        
        out += identity
        out = self.relu(out)

        return out

"""
2   32 32 Stride 1 padding 1
4   64 64 Stride 2 padding 1
4   128 128 stride 2 padding 1
2   256 256 stride 2 padding 1
"""

# Implement ResNets in Fig2 with basic block
class ResNet(nn.Module):
    def __init__(self, basic_block, num_blocks_list, num_classes):
        super(ResNet, self).__init__()

        self.in_channels = 32
        self.conv1 =nn.Conv2d(3, 32, kernel_size=3, stride=1, padding=1)
        self.bn1 = nn.BatchNorm2d(32)
        self.relu = nn.ReLU(inplace=True)
        self.dropout = nn.Dropout2d(0.2)
        self.conv2 = self._make_layer(basic_block, 32, num_blocks_list[0])
        self.conv3 = self._make_layer(basic_block, 64, num_blocks_list[1],stride=2)
        self.conv4 = self._make_layer(basic_block, 128, num_blocks_list[2],stride=2)
        self.conv5 = self._make_layer(basic_block, 256, num_blocks_list[3],stride=2)
        #self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.maxpool = nn.MaxPool2d(2,2)
        self.fc = nn.Linear(256*2*2, num_classes)

    def forward(self, x):

        x = self.relu(self.bn1(self.conv1(x)))
        x = self.dropout(x)
        x = self.conv2(x)
        x = self.conv3(x)
        x = self.conv4(x)
        x = self.conv5(x)

        x = self.maxpool(x)
        x = x.view(x.shape[0], -1)
        x = self.fc(x)

        return x

    def _make_layer(self, basic_block, out_channels, num_blocks, stride=1):
        downsample = None
        if stride != 1 or self.in_channels != out_channels*basic_block.expansion:
            downsample = nn.Sequential(
                nn.Conv2d(self.in_channels, out_channels*basic_block.expansion,
                            kernel_size=1, stride = stride, padding = 0),
                nn.BatchNorm2d(out_channels*basic_block.expansion))
        
        layers = []
        layers.append(basic_block(self.in_channels, out_channels, stride, downsample))
        self.in_channels = out_channels * basic_block.expansion
        for _ in range(1, num_blocks):
            layers.append(basic_block(self.in_channels, out_channels))
        return nn.Sequential(*layers)

from torchsummary import summary
resnet = ResNet(BasicBlock, [2,4,4,2], 100).cuda()
summary(resnet, input_size=(3, 32, 32))

# train
resnet = nn.DataParallel(resnet, device_ids = range(torch.cuda.device_count()))
cudnn.benchmark = True
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(resnet.parameters())

best_test_accuracy = 0.0

start = time.time()

test_accuracy_list = []
for epoch in range(50):
    resnet.train()
    running_loss = 0.0
    for i, data in enumerate(trainloader, 0): # Reference: https://zhuanlan.zhihu.com/p/42501145
        inputs, labels = data
        inputs, labels = Variable(inputs).cuda(), Variable(labels).cuda()
        optimizer.zero_grad()
        outputs = resnet(inputs)
        loss = criterion(outputs, labels)
        loss.backward()
        optimizer.step()
        # fixed IndexError: invalid index of a 0-dim tensor. Use tensor.item() to convert a 0-dim tensor to a Python number
        running_loss+=loss.item()

        if i % 2000 == 1999:
            print('[%d, %5d] loss: %.3f' % (epoch + 1, i + 1, running_loss / 2000))
            running_loss = 0.0
        
    correct = 0
    total = 0
    resnet.eval()
    for j, data in enumerate(testloader, 0):
        
        inputs, labels = data
        inputs, labels = Variable(inputs).cuda(), Variable(labels).cuda()
        outputs = resnet(inputs)
        _, predicted = torch.max(outputs.data, 1)
        correct += predicted.eq(labels).float().sum().item()
        total += len(labels)

    test_accuracy_list.append(correct/total)

    print(f'accuracy every epoch {(correct/total):.3f}')
    if correct/total > best_test_accuracy:
        best_test_accuracy = correct/total

        
end = time.time()
print('Total training time:', end-start)
print('The best test accuracy is', best_test_accuracy)

plt.plot(list(range(19)), test_accuracy_list)
plt.xlabel('epochs')
plt.ylabel('test_accuracy')
plt.title('learning curve plot')
plt.show()

resnet.eval()
correct = 0
total =  0 

for i, data in enumerate(testloader, 0):
    inputs, labels = data
    inputs, labels = Variable(inputs).cuda(), Variable(labels).cuda()
    outputs = resnet(inputs)

    _, predicted = torch.max(outputs.data, 1)
    correct += predicted.eq(labels).float().sum().item()
    total += len(labels)

print(f'accuracy on test set  {(correct/total):.3f}')



def save_checkpoint(net, epoch, best_test_accuracy, optimizer):

    state = {
        'model_state_dict': net.state_dict(),
        'epoch':epoch,
        'best_test_accuracy':best_test_accuracy,
        'optimizer_state_dict': optimizer.state_dict()
    }

    if not os.path.isdir('checkpoints'):
        os.mkdir('checkpoints')
    
    torch.save(state, 'checkpoints/model_state.pt')

def load_checkpoint(net):

    if not os.path.isdir('checkpoints'):
        print("Error: no checkpoints available.")
        raise AssertionError()
    
    checkpoint = torch.load('checkpoints/model_state.pt')
    net.load_state_dict(checkpoint['model_state_dict'])
    optimizer = optim.Adam(net.parameters())
    optimizer.load_state_dict(checkpoint['optimizer_state_dict'])

    start_epoch = checkpoint['epoch']
    best_acc = checkpoint['best_test_accuracy']

    return net, start_epoch, best_acc

